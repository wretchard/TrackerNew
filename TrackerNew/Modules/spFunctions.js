/*** @author Leo Linbeck III*/include(ds.getModelFolder().path + 'Modules/jsOAuth-1.3.6.js');include(ds.getModelFolder().path + 'Modules/jspdf.min.js');include(ds.getModelFolder().path + 'Modules/date.js');var SERVER_URL = require('server.url').get_server_url();var STATE_LIST = {	'AL': [1, 'Alabama'],	'AK': [2, 'Alaska'],	'AZ': [4, 'Arizona'],	'AR': [5, 'Arkansas'],	'CA': [6, 'California'],	'CO': [8, 'Colorado'],	'CT': [9, 'Connecticut'],	'DE': [10, 'Delaware'],	'FL': [12, 'Florida'],	'GA': [13, 'Georgia'],	'HI': [15, 'Hawaii'],	'ID': [16, 'Idaho'],	'IL': [17, 'Illinois'],	'IN': [18, 'Indiana'],	'IA': [19, 'Iowa'],	'KS': [20, 'Kansas'],	'KY': [21, 'Kentucky'],	'LA': [22, 'Louisiana'],	'ME': [23, 'Maine'],	'MD': [24, 'Maryland'],	'MA': [25, 'Massachusetts'],	'MI': [26, 'Michigan'],	'MN': [27, 'Minnesota'],	'MS': [28, 'Mississippi'],	'MO': [29, 'Missouri'],	'MT': [30, 'Montana'],	'NE': [31, 'Nebraska'],	'NV': [32, 'Nevada'],	'NH': [33, 'New Hampshire'],	'NJ': [34, 'New Jersey'],	'NM': [35, 'New Mexico'],	'NY': [36, 'New York'],	'NC': [37, 'North Carolina'],	'ND': [38, 'North Dakota'],	'OH': [39, 'Ohio'],	'OK': [40, 'Oklahoma'],	'OR': [41, 'Oregon'],	'PA': [42, 'Pennsylvania'],	'RI': [44, 'Rhode Island'],	'SC': [45, 'South Carolina'],	'SD': [46, 'South Dakota'],	'TN': [47, 'Tennessee'],	'TX': [48, 'Texas'],	'UT': [49, 'Utah'],	'VT': [50, 'Vermont'],	'VA': [51, 'Virginia'],	'WA': [53, 'Washington'],	'WV': [54, 'West Virginia'],	'WI': [55, 'Wisconsin'],	'WY': [56, 'Wyoming'],	'DC': [11, 'District of Columbia'],	'PR': [72, 'Puerto Rico']};	function initializePDFParams(currentPerson) {	var p = {		person: currentPerson,		lineHeight: 10,		maxLines: 20,		xMargin: 20,		yMargin: 20,		xCol1: 25,		xCol2: 100,		xCol3: 180,		xCol4: 190,		xCoord: 20,		yCoord: 20,		box: {},		line: {}	};		p.box = {		x: 20,		y: 58,		h: 220,		w: 180	};		p.line = {		x1: 21,		x2: 178,		y: 3	};		return p;}	function resetPDFParams(p) {	p.xCoord = 20;	p.yCoord = 20;}function addHeaderToPDF(doc, param) {	doc.setFontSize(24);	doc.text('StrawPoll(tm) Sample Ballot', param.xCoord, param.yCoord);		doc.setFontSize(18);	param.yCoord += param.lineHeight;	doc.text('For the address:', param.xCoord, param.yCoord);		param.xCoord += 20;	param.yCoord += param.lineHeight;	doc.text(param.person.address1, param.xCoord, param.yCoord);	if(param.person.address2) {		param.yCoord += param.lineHeight;		doc.text(param.person.address2, param.xCoord, param.yCoord);		param.box.y += param.lineHeight;		param.box.h -= param.lineHeight;		param.maxLines--;	}	param.yCoord += param.lineHeight;	doc.text(param.person.city + ', ' + param.person.state + '  ' + param.person.zip, param.xCoord, param.yCoord);		param.yCoord += 1.5 * param.lineHeight;	doc.setFontSize(14);	doc.setFontStyle('italic');	doc.text('Election', param.xCol1 + 1, param.yCoord);	doc.text('Candidate', param.xCol2 + 1, param.yCoord);	doc.text('Party', param.xCol3 + 1, param.yCoord);	doc.lines([[param.line.x2 + 2, 0]], param.line.x1 - 1, param.yCoord + param.line.y, [1.0, 1.0]);}		function convertBallotToPDF(currentPerson, c) {	var doc = new jsPDF();	var pdfParams = initializePDFParams(currentPerson);		addHeaderToPDF(doc, pdfParams);		doc.setFontSize(14);	doc.setFontStyle('normal');		var lineNum = 0;	for (var i = 0; i < c.length; i++) {		if (lineNum++ > pdfParams.maxLines) {			doc.rect(pdfParams.box.x, pdfParams.box.y, pdfParams.box.w, pdfParams.box.h);			doc.addPage();			resetPDFParams(pdfParams);			addHeaderToPDF(doc, pdfParams);			doc.setFontStyle('normal');			lineNum = 1;		}		pdfParams.yCoord += pdfParams.lineHeight;		doc.text(c[i].districtName.trim(), pdfParams.xCol1, pdfParams.yCoord);		doc.text(c[i].candidateName.trim(), pdfParams.xCol2, pdfParams.yCoord);		doc.text(c[i].candidateParty.trim(), pdfParams.xCol3, pdfParams.yCoord);		doc.text((c[i].incumbent?' [I]':''), pdfParams.xCol4, pdfParams.yCoord);		if (lineNum <= pdfParams.maxLines)			doc.lines([[pdfParams.line.x2, 0]], pdfParams.line.x1, pdfParams.yCoord + pdfParams.line.y, [1.0, 1.0]);	}	doc.rect(pdfParams.box.x, pdfParams.box.y, pdfParams.box.w, pdfParams.box.h);				return doc;}function generatePDFFileAndURL(currentPerson, folderName) {	var c = ds.Campaign.query('votes.person.ID = :1', currentPerson.ID).toArray('districtType, districtName, candidateName, candidateParty, incumbent, sortLevel');	c.sort(function(a, b) {		if (a.sortLevel < b.sortLevel)			return -1;		if (a.sortLevel > b.sortLevel)			return 1;		return 0;	});		var doc = convertBallotToPDF(currentPerson, c);	var pdfText = doc.output();		var fldr = ds.getModelFolder().path + 'WebFolder/' + folderName + '/';	var hash = generateUUID();	var urlName = fldr + hash + '.pdf';		var f = File(urlName);	var ts = TextStream(f, 'write');	ts.write(pdfText);	ts.close();		return (SERVER_URL + folderName + '/' + hash + '.pdf');}exports.generatePDF = function(currentPerson, debug) {	if (debug) debugger;		try {		var url = generatePDFFileAndURL(currentPerson, 'printedPages');	} catch (e) {		return ( { success: false, id: 'unableToGeneratePDF', message: 'Unable to generate PDF file.' } );	}		return ( { success: true, url: url } );}function shareBroadcast(currentPerson, fbMessage, pdfUrl) {	var xhr = new XMLHttpRequest(); 		var url = 'https://strawpoll.rpxnow.com/api/v2/sharing/broadcast';	xhr.open('POST', url, false); // to connect to a Web site synchronously	xhr.setRequestHeader('Content-Type','application/json');	var data = {		apiKey: require('janrain.api_key').janrain_api_key(),		identifier: currentPerson.latestSocialProfile,		message: fbMessage + ' ' + pdfUrl + ' (Generated by StrawPoll at http://tocque.com)',		source: 'http://tocque.com',		title: 'Click here to view my sample ballot, created with StrawPoll, the Social Voting System',		description: 'Try StrawPoll yourself! You can see who is running in your district, research the candidates using Ballotpedia, create a sample ballot, and share it with your friends. It is fun and easy!',		url: pdfUrl 	};	xhr.send(JSON.stringify(data)); // send the request	if (xhr.status == 200) {		return JSON.parse(xhr.responseText);	}	else		return null;}function shareDirect(currentPerson, fbMessage, friends, pdfUrl) {	var ids = [];	for (var i = 0; i < friends.length; i++) {		ids.push(friends[i].id);	}		var xhr = new XMLHttpRequest(); 		var url = 'https://strawpoll.rpxnow.com/api/v2/sharing/direct';	xhr.open('POST', url, false); // to connect to a Web site synchronously	xhr.setRequestHeader('Content-Type','application/json');	var data = {		apiKey: require('janrain.api_key').janrain_api_key(),		identifier: currentPerson.latestSocialProfile,		message: fbMessage + ' ' + pdfUrl + ' (Generated by StrawPoll at http://tocque.com)',		source: 'http://tocque.com',		title: 'Click here to view my sample ballot, created with StrawPoll, the Social Voting System',		recipients: JSON.stringify(ids),		description: 'Try StrawPoll yourself! You can see who is running in your district, research the candidates using Ballotpedia, create a sample ballot, and share it with your friends. It is fun and easy!',		url: pdfUrl 	};	xhr.send(JSON.stringify(data)); // send the request	if (xhr.status == 200) {		return JSON.parse(xhr.responseText);	}	else		return null;}exports.shareWithFriends = function(currentPerson, postOnWall, shareWithFriends, fbMessage, friends, debug) {	if (debug) debugger;	try {		var url = generatePDFFileAndURL(currentPerson, 'sharedPages');				if (postOnWall)			var broadcast = shareBroadcast(currentPerson, fbMessage, url);				if (shareWithFriends)			var direct = shareDirect(currentPerson, fbMessage, friends, url);				} catch (e) {		return ( { success: false, id: 'unableToShare', message: 'Unable to share PDF file.' } );	}		return ( { success: true, url: url, broadcast: broadcast, direct: direct } );}exports.getFacebookFriends = function(currentPerson, debug) {	if (debug) debugger;	try {		var xhr = new XMLHttpRequest(); 			var url = 'https://strawpoll.rpxnow.com/api/v2/get_contacts';		xhr.open('POST', url, false); // to connect to a Web site synchronously		xhr.setRequestHeader('Content-Type','application/json');		var data = { identifier: currentPerson.latestSocialProfile, apiKey: require('janrain.api_key').janrain_api_key() };		xhr.send(JSON.stringify(data)); // send the request	} catch (e) {		return ( { success: false, id: 'unableToAccessFacebookFriends', message: 'Cannot access Facebook friends.' } );	}		if (xhr.status == 200) {		var response = JSON.parse(xhr.responseText);		var a = response.response.entry;		var f = [];		for (var i = 0; i < a.length; i++) {			f.push( { id: a[i].id, displayName: a[i].displayName, sortName: a[i].name ? a[i].name.familyName : a[i].displayName, identifier: a[i].identifier } );		}				f.sort(function(x, y) {			if (x.sortName < y.sortName)				return -1;			if (x.sortName > y.sortName)				return 1;			return 0;		});				return ( { success: true, friends: f } );	}	else {		return ( { success: false, id: 'facebookFriendsNotFound', message: 'Facebook friends not found.' } );	}}exports.nationBuilderAuthorize = function(debug) {	if (debug) debugger;			var request = OAuth({			consumerKey: 'LMmREXQjrKSUsrhk1lk8KZkotuZjK55cz1gTyfm6',			consumerSecret: require('nationbuilder.api_key').nationbuilder_api_key(),			requestTokenUrl: 'https://elections.nationbuilder.com/oauth/request_token'		});        		request.fetchRequestToken();				var token = request.getAccessTokenKey();					var access = OAuth({			consumerKey: 'LMmREXQjrKSUsrhk1lk8KZkotuZjK55cz1gTyfm6',			accessTokenKey: token,		  	accessTokenUrl: 'https://elections.nationbuilder.com/oauth/access_token'		});        		access.fetchAccessToken();				var token = access.getAccessTokenKey();					return access.result;		//	var xhr = new XMLHttpRequest(); //	xhr.onreadystatechange = function() {//		var state = this.readyState;//		if (state !== 4) { // while the status event is not Done we continue//			return;//		}//	}//	//	var url = 'https://elections.nationbuilder.com/oauth/request_token';//	//	try {//		xhr.open('POST', url, false); // to connect to a Web site synchronously//		xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded');//		xhr.setRequestHeader('Authorization','OAuth');//		var data = { 	//						oauth_consumer_key: 	'LMmREXQjrKSUsrhk1lk8KZkotuZjK55cz1gTyfm6', //						oauth_signature_method: 'HMAC-SHA1',//						oauth_timestamp: 		Date.now(),//						oauth_nonce: 			String(Math.random())//					};//					//		var msg = encodeURI('Authorization=OAuth&Content-Type=application/x-www-form-urlencoded&oauth_consumer_key=' + data.oauth_consumer_key + '&oauth_nonce=' + data.oauth_nonce + '&oauth_signature_method=' + data.oauth_signature_method + '&oauth_timestamp=' + data.oauth_timestamp);//		//		var hash = CryptoJS.HmacSHA1(msg, require('nationbuilder.api_key').nationbuilder_api_key());//		data.oauth_signature = hash.toString(CryptoJS.enc.Base64);//		//		msg = encodeURI('oauth_consumer_key=' + data.oauth_consumer_key + '&oauth_nonce=' + data.oauth_nonce + '&oauth_signature=' + data.oauth_signature + '&oauth_signature_method=' + data.oauth_signature_method + '&oauth_timestamp=' + data.oauth_timestamp);//		//		xhr.send(msg); // send the request//	} catch (e) {//		return ( { success: false, id: 'nationBuilderNotFound', message: 'NationBuilder authorization failed.' } );//	}//	//	if (xhr.status == 200) {//		var response = JSON.parse(xhr.responseText);//				//		return ( { success: true, response: response } );//	}//	else {//		return ( { success: false, id: response.statusText, message: response.responseText } );//	}}exports.janrainAuthorize = function(request, debug) {	if (debug[0].params[1]) debugger;		debugger;			try {		var xhr = new XMLHttpRequest(); 			var url = 'https://strawpoll.rpxnow.com/api/v2/auth_info';		xhr.open('POST', url, false); // to connect to a Web site synchronously		xhr.setRequestHeader('Content-Type','application/json');		//var data = { token: request.token, apiKey: require('janrain.api_key').janrain_api_key() };		var data = { token: request.params[0].token, apiKey: require('janrain.api_key').janrain_api_key() };		xhr.send(JSON.stringify(data)); // send the request	} catch (e) {		return ( { success: false, id: 'socialMediaNotFound', message: 'Social media site not found.' } );	}		if (xhr.status == 200) {		var response = JSON.parse(xhr.responseText);		//var u = ds.Person.socialSignin(response);				//return ( { success: true, user: u, profile: response.profile } );		return ( { success: true, profile: response.profile } );	}	else {		return ( { success: false, id: 'socialLoginFailed', message: 'Social login failed.' } );	}}//function addEmailRecord(personID, d) {//	var u = ds.Person.find('ID = :1',personID);//	if (u == null)//		return ({//			personID: personID,//			votesCast: []//		});//	u.latestEmailAddress = d.msgFrom;//	u.save();//		//	var e = ds.Email.createEntity();//	e.person = personID;//	e.from = d.msgFrom;//	e.to = d.msgTo;//	e.subject = d.msgSubject;//	e.body = d.msgBody;//	e.sentOn = Date.now();//	e.save();//}//exports.sendEmail = function(event, debug) {//	if (debug) debugger;//	//	var r = [];//	var mail = require("waf-mail/mail");//	//	var mailbox = 'strawpollmailbox';//	var password = 'j0hn.stu@rt.m1ll';//	var mailHost = 'smtp.gmail.com';//	var mailPort = 465;//	//	var d = event.data;//	if (event.separate) {//		var toArray = d.msgTo.split(',');//		for (var i = 0; i < toArray.length; i++) {//			var msg = new mail.Mail(); //			msg.addField('From', d.msgFrom); //			msg.addField('To', toArray[i]); //			msg.addField('Subject', d.msgSubject);  //			var x = msg.setContent(d.msgBody);  //			var result = msg.send(mailHost, mailPort, true, mailbox, password);//			if (result)//				addEmailRecord(event.personID, d);//			r.push(result);//		}//	}//	else {//		var msg = new mail.Mail(); //		msg.addField('From', d.msgFrom); //		msg.addField('To', d.msgTo); //		msg.addField('Subject', d.msgSubject);  //		var x = msg.setContent(d.msgBody);  //		var result = msg.send(mailHost, mailPort, true, mailbox, password);//		if (result)//			addEmailRecord(event.personID, d);//		r.push(result);//	}//	//	return ( { success: true, result: r } );//}function setVotes(personID, voteArray) {	for (var i = 0; i < voteArray.length; i++) {		var v = ds.Vote.find('person.ID = :1 AND candidate.ID = :2', personID, voteArray[i].candidateID);		if (voteArray[i].selected && v == null) {			v = ds.Vote.createEntity();			v.person = personID;			v.candidate = voteArray[i].candidateID;			v.save();		}		else if (!voteArray[i].selected && v != null)			v.remove();	}}exports.updateVoteInfo = function(personID, voteArray, debug) {	if (debug) debugger;		var u = ds.Person.find('ID = :1',personID);	if (u == null)		throw ({			id: personID,			message: 'Error: person record ' + personID + ' not found'		});	setVotes(personID, voteArray);		return true;}function setVoteSimple(p, year, voteArray) {	var votes = ds.Vote.query('person.ID = :1 AND candidate.election.year = :2', p.ID, year);	votes.remove();	for (var i = 0; i < voteArray.length; i++) {		var c = ds.Campaign.find('ID = :1', voteArray[i].candidateID);		var v = ds.Vote.createEntity();		v.person = p;		v.candidate = c;		v.save();	}}exports.updateVoteSimple = function(personID, year, voteArray, debug) {	if (debug) debugger;		var u = ds.Person.find('ID = :1',personID);	if (u == null)		throw ({			id: personID,			message: 'Error: person record ' + personID + ' not found'		});	setVoteSimple(u, year, voteArray);		return true;}exports.loadElectionCandidates = function(personID, eID, debug) {	if (debug) debugger;		var r = [];		if (eID != null && personID != null) {			var c = ds.Campaign.query('election.ID = :1', eID);				var a = c.toArray('ID,candidateName,candidateParty,candidateURL,incumbent,voteTotal');		for (var i = 0; i < a.length; i++) {			var v = ds.Vote.find('candidate.ID = :1 AND person.ID = :2', a[i].ID, personID);			r.push({				ID: a[i].ID,				candidateName: a[i].candidateName,				candidateParty: a[i].candidateParty,				incumbent: a[i].incumbent, 				url: a[i].candidateURL,				votes: a[i].voteTotal,				selected: (v != null)			});		}	}		return {		candidates: r	};}exports.loadElectionInfo = function(personID, year, type, debug) {	if (debug) debugger;		var r = [];	var d = null;	var e = null;	var name = '';		var u = ds.Person.find('ID = :1',personID);	if (u == null)		throw ({			id: personID,			message: 'Error: person record ' + personID + ' not found'		});	switch (type) {		case 'US President':			d = ds.PresidentialDistrict.all();			e = ds.Election.find('year = :1 AND district.type = :2', year, type);			name = 'US President';			break;		case 'US Senate':			d = ds.SenateDistrict.find('stateAbbreviation = :2', type, u.state);			if (d != null) {				e = ds.Election.find('year = :1 AND district.ID = :2', year, d.ID);				name = d.name;			}			break;		case 'US House':			d = u.zip9.houseDistrict;			if (d != null) {				e = ds.Election.find('year = :1 AND district.ID = :2', year, d.ID);				name = d.name;			}			break;		case 'State Upper Chamber':			d = u.zip9.stateUpperDistrict;			if (d != null) {				e = ds.Election.find('year = :1 AND district.ID = :2', year, d.ID);				name = d.name;			}			break;		case 'State Lower Chamber':			d = u.zip9.stateLowerDistrict;			if (d != null) {				e = ds.Election.find('year = :1 AND district.ID = :2', year, d.ID);				name = d.name;			}			break;		default:			throw('Election information not found.');	}		var numReps = 0;	if (e != null) {			numReps = e.numberOfReps;			var c = ds.Campaign.query('election.ID = :1', e.ID);				var a = c.toArray('ID,candidateName,candidateParty,candidateURL,incumbent,voteTotal');		for (var i = 0; i < a.length; i++) {			var v = ds.Vote.find('candidate.ID = :1 AND person.ID = :2', a[i].ID, personID);			r.push({				ID: a[i].ID,				candidateName: a[i].candidateName,				candidateParty: a[i].candidateParty,				incumbent: a[i].incumbent, 				url: a[i].candidateURL,				votes: a[i].voteTotal,				selected: (v != null)			});		}		return {			election: {ID: e.ID, year: e.year, name: name, numberOfReps: numReps}, 			candidates: r		};	}	else return {			election: {ID: 0, year: year, name: type, numberOfReps: 0}, 			candidates: []		};}exports.getZip9PersonAndVoteRecord = function(pID, year, addr1, addr2, city, state, zip, debug) {	var result = exports.getZip9andPersonRecord(pID, addr1, addr2, city, state, zip, debug);	if (result.success)		result.votes = ds.Vote.query('person.ID = :1 AND candidate.election.year = :2', result.person.ID, year).toArray('candidate.ID, candidate.election.ID');		return result;}function parseUSPSAddress(v, city) {	var r = {};		if (v.substr(0,4) == 'none') {		r.firstLine = '';		r.secondLine = '';		r.success = false;	}	else {		r.success = true;		var a = v.split('\n');		a.length = 2;		r.firstLine = a[0].trim();		r.secondLine = a[1].trim();		r.ST = r.secondLine.substr(r.secondLine.length-'XX 00000-0000'.length, 2);		r.city = city ? city : r.secondLine.substr(0, r.secondLine.length-' XX 00000-0000'.length).trim();		r.zip9 = r.secondLine.substr(r.secondLine.length-'00000-0000'.length);		r.zip = r.zip9.substr(0,5);		r.s = ds.State.conjure(r.ST, STATE_LIST);		r.state = r.s.name;	}		return r;}function getGoogleElectionData(v) {	var xhr = new XMLHttpRequest(); 		var url = 'https://www.googleapis.com/civicinfo/us_v1/voterinfo/4000/lookup?key=' + require('google.civic.api_key').get_google_civic_api_key();	xhr.open('POST', url, false); // to connect to a Web site synchronously	var data = { address: (v.firstLine + ',' + v.city + ',' + v.state + ',' + v.zip9) };	xhr.setRequestHeader('Content-Type','application/json');	xhr.send(JSON.stringify(data)); // send the request	if (xhr.status == 200)		return ( { success: true, result: JSON.parse(xhr.responseText) } );	else		return ( { success: false, result: xhr.responseText } );}function processGoogleCandidate(c, e, w) {	var p = ds.Politician.conjure(c, w);	var c = ds.Campaign.conjure(e, p);}function processGoogleContest(c, w, z) {	if (c.referendumTitle) {		var b = ds.BallotMeasure.conjure(c, w);	}	else {		var d = ds.District.conjure(c, w.state)		var x = ds.Zip9District.conjure(z, d);		var e = ds.Election.conjure(c, d, w);		for (var i = 0; i < c.candidates.length; i++) {			processGoogleCandidate(c.candidates[i], e, w);		}	}}function processGoogleElection(w, s) {	var ec = ds.ElectionCalendar.conjure(w, s);	return ec;}function parseAndStoreGoogleElectionData(g, v) {	var w = processGoogleElection(g.election, v.s);	if (g.contests)		for (var i = 0; i < g.contests.length; i++) {			var c = g.contests[i];			processGoogleContest(c, w, v.zip9Record);		}	return null;	for (var i = 0; i < g.pollingLocations.length; i++) {		processGooglePollingLocations(g.pollingLocations[i]);	}		for (var i = 0; i < g.earlyVoteSites.length; i++) {		processGoogleEarlyVoteSites(g.earlyVoteSites[i]);	}		processGoogleStateInfo(v, g.state);}exports.getZip9andPersonRecord = function(pID, addr1, addr2, city, state, zip, debug) {	if (debug) debugger;		try {		var xhr = new XMLHttpRequest(); 		var getString = 'http://jaguar.sego.me:7770/zip?address1=' + addr1 + '&address2=' + addr2 + '&city=' + city + '&state=' + state + '&zip=' + zip;		xhr.open('GET', getString, false); // to connect to a Web site synchronously		xhr.send(); // send the request	} catch (e) {		return ( { success: false, id: 'uspsNotFound', message: 'Address could not be verified.' } );	}	var v = parseUSPSAddress(xhr.responseText, city);		var g = getGoogleElectionData(v);	v.zip9Record = ds.Zip9.conjure(v.zip9, v.s);	if (g.success)		parseAndStoreGoogleElectionData(g.result, v);	else		return ( { success: false, id: 'googlDataNotFound', message: 'Election information could not be accessed.' } );		var u = ds.Person.conjure(pID, addr1, addr2, v.city, v);		return ( { success: true, person: u, zipVerified: v.success, USPS: [v.firstLine, v.secondLine] } );}exports.getSplashInfo = function(debug) {	if (debug) debugger;		var v = ds.Vote.count();	var e = ds.Election.count();	var o = ds.Vote.query('candidate.candidateName = "Barack Obama*"').count();	var r = ds.Vote.query('candidate.candidateName = "Mitt Romney*"').count();		return ( { voteCount: v, electionCount: e, obamaCount: o, romneyCount: r } );}